(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{308:function(e,a,n){"use strict";n.r(a);var t=n(1),s=Object(t.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,a=e.$createElement,n=e._self._c||a;return n("div",{staticClass:"content"},[n("h4",{attrs:{id:"set-和-map"}},[e._v("Set 和 Map")]),e._v(" "),n("p",[e._v("Set 和 Map 都是 ES6 中新增的数据结构，是对当前 JS 数组和对象这两种重要数据结构的扩展。由于是新增的数据结构")]),e._v(" "),n("ul",[n("li",[e._v("Set 类似于数组，但数组可以允许元素重复，Set 不允许元素重复")]),e._v(" "),n("li",[e._v("Map 类似于对象，但普通对象的 key 必须是字符串或者数字，而 Map 的 key 可以是任何数据类型...")])]),e._v(" "),n("h5",{attrs:{id:"set"}},[e._v("Set")]),e._v(" "),n("p",[e._v("Set 实例不允许元素有重复，可以通过以下示例证明。可以通过一个数组初始化一个 Set 实例，或者通过add添加元素，元素不能重复，重复的会被忽略。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 例1\nconst set = new Set([1, 2, 3, 4, 4]);\nconsole.log(set) // Set(4) {1, 2, 3, 4}\n\n// 例2\nconst set = new Set();\n[2, 3, 5, 4, 5, 8, 8].forEach(item => set.add(item));\nfor (let item of set) {\n  console.log(item);\n}\n// 2 3 5 4 8\n")])])]),n("p",[e._v("Set 实例的属性和方法有")]),e._v(" "),n("ul",[n("li",[e._v("size：获取元素数量。")]),e._v(" "),n("li",[e._v("add(value)：添加元素，返回 Set 实例本身。")]),e._v(" "),n("li",[e._v("delete(value)：删除元素，返回一个布尔值，表示删除是否成功。")]),e._v(" "),n("li",[e._v("has(value)：返回一个布尔值，表示该值是否是 Set 实例的元素。")]),e._v(" "),n("li",[e._v("clear()：清除所有元素，没有返回值。")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const s = new Set();\ns.add(1).add(2).add(2); // 添加元素\n\ns.size // 2\n\ns.has(1) // true\ns.has(2) // true\ns.has(3) // false\n\ns.delete(2);\ns.has(2) // false\n\ns.clear();\nconsole.log(s);  // Set(0) {}\n")])])]),n("h5",{attrs:{id:"set-实例的遍历，可使用如下方法"}},[e._v("Set 实例的遍历，可使用如下方法")]),e._v(" "),n("ul",[n("li"),e._v(" "),n("li",[e._v("keys()：返回键名的遍历器。")]),e._v(" "),n("li",[e._v("values()：返回键值的遍历器。不过由于 Set 结构没有键名，只有键值（或者说键名和键值是同一个值），所以keys()和values()返回结果一致。")]),e._v(" "),n("li",[e._v("entries()：返回键值对的遍历器。")]),e._v(" "),n("li",[e._v("forEach()：使用回调函数遍历每个成员。")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('let set = new Set([\'aaa\', \'bbb\', \'ccc\']);\n\nfor (let item of set.keys()) {\n  console.log(item);\n}\n// aaa\n// bbb\n// ccc\n\nfor (let item of set.values()) {\n  console.log(item);\n}\n// aaa\n// bbb\n// ccc\n\nfor (let item of set.entries()) {\n  console.log(item);\n}\n// ["aaa", "aaa"]\n// ["bbb", "bbb"]\n// ["ccc", "ccc"]\n\nset.forEach((value, key) => console.log(key + \' : \' + value))\n// aaa : aaa\n// bbb : bbb\n// ccc : ccc...\n\n')])])]),n("h5",{attrs:{id:"map"}},[e._v("Map")]),e._v(" "),n("p",[e._v("Map 的用法和普通对象基本一致，先看一下它能用非字符串或者数字作为 key 的特性。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const map = new Map();\nconst obj = {p: 'Hello World'};\n\nmap.set(obj, 'OK')\nmap.get(obj) // \"OK\"\n\nmap.has(obj) // true\nmap.delete(obj) // true\nmap.has(obj) // false\n")])])]),n("p",[e._v("需要使用new Map()初始化一个实例，下面代码中set get has delete顾名即可思义（下文也会演示）。其中，map.set(obj, 'OK')就是用对象作为的 key （不光可以是对象，任何数据类型都可以），并且后面通过map.get(obj)正确获取了。")]),e._v(" "),n("p",[e._v("Map 实例的属性和方法如下：")]),e._v(" "),n("p",[e._v("size：获取成员的数量\nset：设置成员 key 和 value\nget：获取成员属性值\nhas：判断成员是否存在\ndelete：删除成员\nclear：清空所有")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const map = new Map();\nmap.set('aaa', 100);\nmap.set('bbb', 200);\n\nmap.size // 2\n\nmap.get('aaa') // 100\n\nmap.has('aaa') // true\n\nmap.delete('aaa')\nmap.has('aaa') // false\n\nmap.clear()\n")])])]),n("p",[e._v("Map 实例的遍历方法有：")]),e._v(" "),n("ul",[n("li",[e._v("keys()：返回键名的遍历器。")]),e._v(" "),n("li",[e._v("values()：返回键值的遍历器。")]),e._v(" "),n("li",[e._v("entries()：返回所有成员的遍历器。")]),e._v(" "),n("li",[e._v("forEach()：遍历 Map 的所有成员。")]),e._v(" "),n("li",[e._v("const map = new Map();")]),e._v(" "),n("li",[e._v("map.set('aaa', 100);")]),e._v(" "),n("li",[e._v("map.set('bbb', 200);")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('for (let key of map.keys()) {\n  console.log(key);\n}\n// "aaa"\n// "bbb"\n\nfor (let value of map.values()) {\n  console.log(value);\n}\n// 100\n// 200\n\nfor (let item of map.entries()) {\n  console.log(item[0], item[1]);\n}\nfor (let item of map.entries()) {\n  console.log(item[0], item[1]);\n}\n// aaa 100\n// bbb 200\n\n// 或者\nfor (let [key, value] of map.entries()) {\n  console.log(key, value);\n}\n// aaa 100\n// bbb 200\n')])])])])}],!1,null,null,null);s.options.__file="set-and-map.md";a.default=s.exports}}]);